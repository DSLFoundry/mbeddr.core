import de.itemis.mps.gradle.GitBasedVersioning

ext.defaultSnapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.defaultReleaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'

//MPS versions
ext.mpsMajor = "2018.3"
ext.mpsBuild = "2018.3.4"

//MPS extensions version
ext.mpsExtensionsVersion = project.findProperty('mpsExtensionsVersion') ?: "2018.3.+"

ext.artifactsDir = new File(rootDir, 'artifacts')

ext.ciBuild = project.findProperty("forceCI") ?: !project.findProperty('mpsHomeDir') && project.findProperty("teamcity")

buildscript {
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        throw new GradleException("This build script requires java " + JavaVersion.VERSION_1_8 + ", but you are currently using " + JavaVersion.current())
    }
    repositories {
        mavenLocal()
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }

    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1' +
                '.0.22.+'
    }
}

subprojects {
    // required plugins
    apply plugin: "base"
    apply plugin: "maven-publish"
    ext.mbeddrMajor = "1"
    ext.mbeddrMinor = "2"

    // switch to snapshot/release repositories passed with -P option via command line, if any, 
    // or use default snapshot/release repositories otherwise
    if (project.hasProperty('snapshotRepository') && !project.getProperty('snapshotRepository').empty) {
        ext.snapshotRepository = project.getProperty('snapshotRepository')
    } else {
        ext.snapshotRepository = defaultSnapshotRepository
    }
    if (project.hasProperty('releaseRepository') && !project.getProperty('releaseRepository').empty) {
        ext.releaseRepository = project.getProperty('releaseRepository')
    } else {
        ext.releaseRepository = defaultReleaseRepository
    }

    // use depencency repositories passed as comma-separated list with -P option via command line, if any, 
    // or use default snapshot/release repositories otherwise
    if (project.hasProperty('dependencyRepositories') && !project.getProperty('dependencyRepositories').empty) {
        if (project.getProperty('dependencyRepositories') instanceof String) {
            ext.dependencyRepositories = project.getProperty('dependencyRepositories').split(',') as Set
        }
    } else {
        ext.dependencyRepositories = [defaultSnapshotRepository, defaultReleaseRepository]
    }

    if (project.hasProperty("mbeddrVersion")) {
        ext.mbeddrBuildNumber = project.getProperty('mbeddrVersion')
    } else {
        // locally versions are SNAPSHOT
        if (ciBuild) {
            // setting mbeddrMajor
            if (project.hasProperty('mbeddrMajor')) {
                ext.mbeddrMajor = project.getProperty('mbeddrMajor')
            }

            // setting mbeddrMinor
            if (project.hasProperty('mbeddrMinor')) {
                ext.mbeddrMinor = project.getProperty('mbeddrMinor')
            }

            // setting mbeddrBuild
            if (project.hasProperty('mbeddrBuild')) {
                ext.mbeddrBuild = project.getProperty('mbeddrBuild')
            } else {
                ext.mbeddrBuild = GitBasedVersioning.getGitBranch()
            }

            if (project.hasProperty("mbeddrBuildCounter")) {
                ext.mbeddrBuildCounter = project.getProperty("mbeddrBuildCounter")
            } else {
                ext.mbeddrBuildCounter = GitBasedVersioning.getGitCommitCount()
            }
            if(mbeddrBuild == "stable") {
                mbeddrBuild = "master"
            }
            ext.mbeddrBuildNumber = GitBasedVersioning.getVersion(mbeddrBuild, mbeddrMajor, mbeddrMinor, mbeddrBuildCounter)
        } else {
            ext.mbeddrBuildNumber = "${ext.mbeddrMajor}.${ext.mbeddrMinor}-SNAPSHOT"
        }

        // Enable mbeddr to be assigned a different version number than mbeddr platform, 
        // as well as mbeddr to be built against a specified existing mbeddr platform version
		ext.mbeddrPlatformBuildNumber = project.findProperty('mbeddrPlatformVersion') ?: mbeddrBuildNumber

        if (ciBuild) {
			// Coerce TeamCity build number to mbeddrBuildNumber by default 
			// (see https://octopus.com/blog/teamcity-version-numbers-based-on-branches for details)
			println "##teamcity[buildNumber '${mbeddrBuildNumber}']"
        } else {
            println "Local build detected. mbeddr version $ext.mbeddrBuildNumber, mbeddr platform version $ext.mbeddrPlatformBuildNumber"
        }
    }
}